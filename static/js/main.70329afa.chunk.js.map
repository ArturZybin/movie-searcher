{"version":3,"sources":["components/searchbar/Filter.tsx","components/searchbar/SearchBar.tsx","components/ThemeToggler.tsx","components/moviesList/FullMovieInfo.tsx","components/moviesList/Movie.tsx","components/moviesList/MoviesList.tsx","App.tsx","index.tsx"],"names":["Filter","props","className","isClosed","name","onChange","e","handleTypeChange","target","value","handlePlotChange","handleYearChange","SearchBar","state","isFilterClosed","isCentered","title","type","plotLength","year","triggerEnterKeySearch","keyCode","handleSearch","setState","API_KEY","this","placeholder","autoFocus","onKeyDown","onClick","data","React","Component","ThemeToggler","handleToggle","defaultChecked","FullMovieInfo","isError","handleCloseButtonClick","ratings","Ratings","map","rating","key","Source","Value","Runtime","Plot","Genre","Released","Actors","Director","BoxOffice","Awards","length","Movie","isFullDataLoaded","fullData","isFullInfoOpened","loadFullData","a","url","createURL","fetch","response","json","imdbID","URL","searchParams","set","toString","openFullInfo","stopPropagation","window","history","pushState","onpopstate","closeFullInfo","Poster","Title","Year","Type","src","alt","PureComponent","MoviesList","useState","loadedMoviesCount","setLoadedMoviesCount","totalMoviesCount","setTotalMoviesCount","loadedPagesCount","setLoadedPagesCount","loadedMovies","setLoadedMovies","setIsError","errorMessage","setErrorMessage","loadNextPage","resetLoaded","nextPageNumber","handleError","Response","Error","Search","totalResults","searchData","status","useEffect","shouldStartNewSearch","handleSearchStart","movieData","index","App","shouldRenderMoviesList","theme","toggleTheme","event","checked","startSearching","resetStartNewSearch","id","ReactDOM","render","document","getElementById"],"mappings":"+PASaA,EAAiC,SAACC,GAC5C,OAGG,yBAAKC,UAAWD,EAAME,SAAW,uBAAyB,UACvD,yBAAKD,UAAU,kBACZ,4BAAQE,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAOL,EAAMM,iBAAiBD,EAAEE,OAAOC,SAClE,4BAAQA,MAAM,IAAd,yBACA,yCACA,0CACA,6CAIN,yBAAKP,UAAU,kBACZ,4BAAQE,KAAK,aAAaC,SAAU,SAACC,GAAD,OAAOL,EAAMS,iBAAiBJ,EAAEE,OAAOC,SACxE,4BAAQA,MAAM,SAAd,mBACA,4BAAQA,MAAM,QAAd,oBAyBN,yBAAKP,UAAU,kBACZ,4BAAQE,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAOL,EAAMU,iBAAiBL,EAAEE,OAAOC,SAClE,4BAAQA,MAAM,IAAd,eACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,wCACA,4CC7HFG,EAAb,2MACGC,MAAyB,CACtBC,gBAAgB,EAChBC,YAAY,EACZC,MAAO,GACPC,KAAM,GACNC,WAAY,QACZC,KAAM,IAPZ,EAWGC,sBAAwB,SAACd,GACJ,KAAdA,EAAEe,SACN,EAAKC,gBAbX,EAiBGA,aAAe,WAAa,IAAD,EAC8B,EAAKT,MAAnDE,EADgB,EAChBA,WAAYC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","file":"static/js/main.70329afa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface IFilterProps {\r\n   isClosed: boolean,\r\n   handleTypeChange: (arg0: string) => void,\r\n   handlePlotChange: (arg0: 'short' | 'full') => void,\r\n   handleYearChange: (arg0: string) => void\r\n}\r\n\r\nexport const Filter: React.FC<IFilterProps> = (props) => {\r\n   return (\r\n      // just hardcode all values, don't wanna bother so much about this\r\n      \r\n      <div className={props.isClosed ? 'filter filter_closed' : 'filter'}>\r\n         <div className=\"filter__select\">\r\n            <select name=\"type\" onChange={(e) => props.handleTypeChange(e.target.value)}>\r\n               <option value=\"\">Select what to search</option>\r\n               <option>Movie</option>\r\n               <option>Series</option>\r\n               <option>Episode</option>\r\n            </select>\r\n         </div>\r\n\r\n         <div className=\"filter__select\">\r\n            <select name=\"plotLength\" onChange={(e) => props.handlePlotChange(e.target.value as 'short' | 'full')}>\r\n               <option value=\"short\">Load short plot</option>\r\n               <option value=\"full\">Load full plot</option>\r\n            </select>\r\n         </div>\r\n\r\n         {/* maybe in future, paid version of api needed */}\r\n         {/* <div className=\"filter__select\">\r\n            <select name=\"genre\" onChange={(e) => props.handleGenreChange(e.target.value)}>\r\n               <option value=\"\">Select genre</option>\r\n               <option>Action</option>\r\n               <option>Adventure</option>\r\n               <option>Animation</option>\r\n               <option>Biography</option>\r\n               <option>Comedy</option>\r\n               <option>Crime</option>\r\n               <option>Documentary</option>\r\n               <option>Drama</option>\r\n               <option>Fantasy</option>\r\n               <option>Horror</option>\r\n               <option>Music</option>\r\n               <option>Sci-Fi</option>\r\n               <option>War</option>\r\n               <option>Western</option>\r\n            </select>\r\n         </div> */}\r\n\r\n         <div className=\"filter__select\">\r\n            <select name=\"year\" onChange={(e) => props.handleYearChange(e.target.value)}>\r\n               <option value=\"\">Select year</option>\r\n               <option>2020</option>\r\n               <option>2019</option>\r\n               <option>2018</option>\r\n               <option>2017</option>\r\n               <option>2016</option>\r\n               <option>2015</option>\r\n               <option>2014</option>\r\n               <option>2013</option>\r\n               <option>2012</option>\r\n               <option>2011</option>\r\n               <option>2010</option>\r\n               <option>2009</option>\r\n               <option>2008</option>\r\n               <option>2007</option>\r\n               <option>2006</option>\r\n               <option>2005</option>\r\n               <option>2004</option>\r\n               <option>2003</option>\r\n               <option>2002</option>\r\n               <option>2001</option>\r\n               <option>2000</option>\r\n               <option>1999</option>\r\n               <option>1998</option>\r\n               <option>1997</option>\r\n               <option>1996</option>\r\n               <option>1995</option>\r\n               <option>1994</option>\r\n               <option>1993</option>\r\n               <option>1992</option>\r\n               <option>1991</option>\r\n               <option>1990</option>\r\n               <option>1989</option>\r\n               <option>1988</option>\r\n               <option>1987</option>\r\n               <option>1986</option>\r\n               <option>1985</option>\r\n               <option>1984</option>\r\n               <option>1983</option>\r\n               <option>1982</option>\r\n               <option>1981</option>\r\n               <option>1980</option>\r\n               <option>1979</option>\r\n               <option>1978</option>\r\n               <option>1977</option>\r\n               <option>1976</option>\r\n               <option>1975</option>\r\n               <option>1974</option>\r\n               <option>1973</option>\r\n               <option>1972</option>\r\n               <option>1971</option>\r\n               <option>1970</option>\r\n               <option>1969</option>\r\n               <option>1968</option>\r\n               <option>1967</option>\r\n               <option>1966</option>\r\n               <option>1965</option>\r\n               <option>1964</option>\r\n               <option>1963</option>\r\n               <option>1962</option>\r\n               <option>1961</option>\r\n               <option>1960</option>\r\n               <option>1959</option>\r\n               <option>1958</option>\r\n               <option>1957</option>\r\n               <option>1956</option>\r\n               <option>1955</option>\r\n               <option>1954</option>\r\n               <option>1953</option>\r\n               <option>1952</option>\r\n               <option>1951</option>\r\n               <option>1950</option>\r\n               <option>1949</option>\r\n               <option>1948</option>\r\n               <option>1947</option>\r\n               <option>1946</option>\r\n               <option>1945</option>\r\n               <option>1944</option>\r\n               <option>1943</option>\r\n               <option>1942</option>\r\n               <option>1941</option>\r\n               <option>1940</option>\r\n               <option>1939</option>\r\n               <option>1938</option>\r\n               <option>1937</option>\r\n               <option>1936</option>\r\n               <option>1935</option>\r\n               <option>1934</option>\r\n               <option>1933</option>\r\n               <option>1932</option>\r\n               <option>1931</option>\r\n               <option>1930</option>\r\n            </select>\r\n         </div>\r\n      </div>\r\n   )\r\n}","import React from 'react';\r\nimport { ISearchData } from '../../interfaces';\r\nimport { Filter } from './Filter';\r\n\r\n\r\ninterface ISearchBarState {\r\n   isFilterClosed: boolean,\r\n   isCentered: boolean,\r\n   title: string,\r\n   type: string,\r\n   plotLength: 'short' | 'full',\r\n   year: string\r\n}\r\n\r\ninterface ISearchBarProps {\r\n   handleSearch: (searchData: ISearchData) => void\r\n}\r\n\r\n\r\nexport class SearchBar extends React.Component<ISearchBarProps, ISearchBarState> {\r\n   state: ISearchBarState = {\r\n      isFilterClosed: true,\r\n      isCentered: true,\r\n      title: '',\r\n      type: '',\r\n      plotLength: 'short',\r\n      year: ''\r\n   }\r\n\r\n\r\n   triggerEnterKeySearch = (e: React.KeyboardEvent): void => {\r\n      if (e.keyCode !== 13) return;\r\n      this.handleSearch();\r\n   }\r\n\r\n\r\n   handleSearch = (): void => {\r\n      const { isCentered, title, type, plotLength, year } = this.state;\r\n\r\n      if (!title) return;\r\n\r\n      if (isCentered) {\r\n         this.setState({ isCentered: false });\r\n      }\r\n\r\n      this.props.handleSearch({\r\n         title, type, plotLength, year, API_KEY: '1ff05d65'\r\n      })\r\n   }\r\n\r\n\r\n   render() {\r\n      const { isCentered, isFilterClosed } = this.state;\r\n\r\n      return (\r\n         <div className={isCentered ? \"searchbar searchbar_centered\" : \"searchbar\"}>\r\n            <input\r\n               className=\"searchbar__input\"\r\n               type=\"text\"\r\n               placeholder=\"Search movies\"\r\n               autoFocus={true}\r\n               onChange={(e) => this.setState({ title: e.target.value })}\r\n               onKeyDown={this.triggerEnterKeySearch}\r\n            />\r\n            <button\r\n               className=\"searchbar__filter-button searchbar__button\"\r\n               onClick={() => this.setState({ isFilterClosed: !isFilterClosed })}\r\n            />\r\n            <button\r\n               className=\"searchbar__search-button searchbar__button\"\r\n               onClick={this.handleSearch}\r\n            />\r\n            <Filter\r\n               isClosed={isFilterClosed}\r\n               handleTypeChange={(data) => this.setState({ type: data })}\r\n               handlePlotChange={(data: 'short' | 'full') => this.setState({ plotLength: data })}\r\n               handleYearChange={(data) => this.setState({ year: data })}\r\n            />\r\n         </div>\r\n      )\r\n   }\r\n}","import React from 'react';\r\n\r\ninterface IThemeTogglerProps {\r\n   handleToggle: (event: React.FormEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const ThemeToggler: React.FC<IThemeTogglerProps> = ({ handleToggle }) => {\r\n   return (\r\n      <input\r\n         className=\"theme-toggler\"\r\n         type=\"checkbox\"\r\n         onChange={handleToggle}\r\n         defaultChecked={true}\r\n      >\r\n      </input>\r\n   )\r\n}","import React from 'react';\nimport { IFullMovieInfo } from '../../interfaces';\n\n\ninterface IProps {\n   isError: boolean,\n   handleCloseButtonClick: () => void,\n   data: IFullMovieInfo\n}\n\nexport const FullMovieInfo: React.FC<IProps> = (props) => {\n   if (props.isError) {\n      return (\n         <>\n            <button\n               className=\"movie__close-full-info-button\"\n               onClick={props.handleCloseButtonClick}\n            >&#10008;</button>\n            <div className=\"error-message error-message_size_small\">Check your connection</div>\n         </>\n      )\n   }\n\n\n   const data = props.data;\n\n   let ratings: JSX.Element[] = data.Ratings.map((rating) => (\n      <span key={rating.Source}>\n         {rating.Source}:{' '}\n         <span className='movie__rating'>{rating.Value}</span>{', '}\n      </span>\n   ))\n   \n\n   return (\n      <>\n         <button\n            className=\"movie__close-full-info-button\"\n            onClick={props.handleCloseButtonClick}\n         >&#10008;</button>\n\n         <div className=\"movie__runtime movie__label\">{data.Runtime}</div>\n         <div className=\"movie__common-info\">\n            <span className=\"movie__common-info-title\">{data.Plot === 'N/A' ? 'Plot: ' : ''}</span>\n            {data.Plot}\n         </div>\n         <div className=\"movie__common-info\">\n            <span className=\"movie__common-info-title\">Genre: </span>\n            {data.Genre}\n         </div>\n         <div className=\"movie__common-info\">\n            <span className=\"movie__common-info-title\">Released: </span>\n            {data.Released}\n         </div>\n         <div className=\"movie__common-info\">\n            <span className=\"movie__common-info-title\">Actors: </span>\n            {data.Actors}\n         </div>\n         <div className=\"movie__common-info\">\n            <span className=\"movie__common-info-title\">Director: </span>\n            {data.Director}\n         </div>\n         <div className=\"movie__common-info\">\n            <span className=\"movie__common-info-title\">Box office: </span>\n            {data.BoxOffice}\n         </div>\n         <div className=\"movie__common-info\">\n            <span className=\"movie__common-info-title\">Awards: </span>\n            {data.Awards}\n         </div>\n         <div className=\"movie__common-info\">\n            <span className=\"movie__common-info-title\">Ratings: </span>\n            {ratings.length ? ratings : 'N/A'}\n         </div>\n      </>\n   )\n}","import React from 'react';\r\nimport { IFullMovieInfo } from '../../interfaces';\r\nimport { FullMovieInfo } from './FullMovieInfo';\r\n\r\n\r\ninterface IMovieProps {\r\n   data: {\r\n      Poster: string,\r\n      Title: string,\r\n      Year: string,\r\n      Type: string,\r\n      imdbID: string,\r\n      plotLength: 'short' | 'full',\r\n      API_KEY: string\r\n   }\r\n}\r\n\r\ninterface IMovieState {\r\n   isFullDataLoaded: boolean,\r\n   fullData: IFullMovieInfo,\r\n   isFullInfoOpened: boolean,\r\n   isError: boolean\r\n}\r\n\r\n\r\nexport class Movie extends React.PureComponent<IMovieProps, IMovieState> {\r\n   state: IMovieState = {\r\n      isFullDataLoaded: false,\r\n      fullData: {} as IFullMovieInfo,\r\n      isFullInfoOpened: false,\r\n      isError: false\r\n   }\r\n\r\n\r\n   loadFullData = async () => {\r\n      const url: string = this.createURL();\r\n      let data;\r\n\r\n      try {\r\n         const response = await fetch(url);\r\n         data = await response.json();\r\n      } catch {\r\n         this.setState({ isError: true } as IMovieState)\r\n         return;\r\n      }\r\n\r\n      this.setState({\r\n         isFullDataLoaded: true,\r\n         fullData: data,\r\n         isError: false\r\n      } as IMovieState)\r\n   }\r\n\r\n\r\n   createURL = (): string => {\r\n      const { API_KEY } = this.props.data;//\r\n      const { imdbID, plotLength } = this.props.data;\r\n      const url: URL = new URL('https://www.omdbapi.com');\r\n\r\n      url.searchParams.set('apikey', API_KEY);\r\n      url.searchParams.set('i', imdbID);\r\n      url.searchParams.set('plot', plotLength);\r\n\r\n      return url.toString()\r\n   }\r\n\r\n\r\n   openFullInfo = (e: React.MouseEvent): void => {\r\n      // to not trigger outside click that will close full info\r\n      e.stopPropagation();\r\n\r\n      if (this.state.isFullInfoOpened) return;\r\n\r\n      if (!this.state.isFullDataLoaded) {\r\n         this.loadFullData();\r\n      }\r\n      this.setState({ isFullInfoOpened: true });\r\n\r\n      window.history.pushState(null, '', \"?page=movie\")\r\n      window.onpopstate = this.closeFullInfo;\r\n   }\r\n\r\n\r\n   closeFullInfo = (): void => {\r\n      if (this.state.isFullInfoOpened) {\r\n         this.setState({ isFullInfoOpened: false } as IMovieState);\r\n      }\r\n      window.onpopstate = null;\r\n   }\r\n\r\n\r\n\r\n   render() {\r\n      const { Poster, Title, Year, Type } = this.props.data;\r\n      const { isFullInfoOpened, isFullDataLoaded, isError } = this.state;\r\n\r\n      return (\r\n         <div>\r\n            <div className={isFullInfoOpened ? 'movie-locker' : ''} onClick={this.closeFullInfo}>\r\n               <div\r\n                  className={isFullInfoOpened ? 'movie movie_opened' : 'movie'}\r\n                  onClick={this.openFullInfo}\r\n               >\r\n                  {\r\n                     Poster === \"N/A\" ?\r\n                        <div className=\"movie__poster movie__poster-replacer\" />\r\n                        :\r\n                        <img className=\"movie__poster\" src={Poster} alt=\"poster\" />\r\n                  }\r\n                  <h2 className=\"movie__title\">{Title}</h2>\r\n                  <div className=\"movie__year movie__label\">{Year}</div>\r\n                  <div className=\"movie__type movie__label\">{Type}</div>\r\n\r\n                  {\r\n                     (isFullInfoOpened && isFullDataLoaded) || (isFullInfoOpened && isError) ?\r\n                        <FullMovieInfo\r\n                           isError={isError}\r\n                           handleCloseButtonClick={this.closeFullInfo}\r\n                           data={this.state.fullData}\r\n                        />\r\n                        :\r\n                        null\r\n                  }\r\n               </div>\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nimport { ISearchData, IMovieInfo } from '../../interfaces';\r\nimport { Movie } from './Movie';\r\n\r\n\r\ninterface IMoviesListProps {\r\n   searchData: ISearchData,\r\n   shouldStartNewSearch: boolean,\r\n   handleSearchStart: () => void\r\n}\r\n\r\n\r\nexport const MoviesList: React.FC<IMoviesListProps> = (props) => {\r\n   const [loadedMoviesCount, setLoadedMoviesCount] = useState<number>(0);\r\n   const [totalMoviesCount, setTotalMoviesCount] = useState<number>(0);\r\n   const [loadedPagesCount, setLoadedPagesCount] = useState<number>(0);\r\n   const [loadedMovies, setLoadedMovies] = useState<IMovieInfo[]>([]);\r\n\r\n   const [isError, setIsError] = useState<boolean>(false);\r\n   const [errorMessage, setErrorMessage] = useState<string>('');\r\n\r\n   useEffect(() => {\r\n      if (props.shouldStartNewSearch) {\r\n         startNewSearch();\r\n      }\r\n      // eslint-disable-next-line\r\n   }, [props.shouldStartNewSearch])\r\n\r\n\r\n   function startNewSearch(): void {\r\n      props.handleSearchStart();\r\n      resetState();\r\n      loadNextPage(true);\r\n   }\r\n\r\n\r\n   function resetState(): void {\r\n      setLoadedMoviesCount(0);\r\n      setTotalMoviesCount(0);\r\n      setLoadedMovies([]);\r\n      setLoadedPagesCount(0);\r\n   }\r\n\r\n\r\n   // state updates asynchronous, so when it is reset\r\n   // this function might use outdated state\r\n   // so it receives parameter that tells whether it needs to use reset state\r\n   async function loadNextPage(resetLoaded: boolean) {\r\n      const nextPageNumber: number = resetLoaded ? 1 : loadedPagesCount + 1;\r\n      const url: string = createURL(nextPageNumber);\r\n      let data;\r\n\r\n      try {\r\n         const response = await fetch(url);\r\n         data = await response.json();\r\n      } catch (e) {\r\n         handleError('Check your connection');\r\n         return;\r\n      }\r\n\r\n      if (data.Response === 'False') {\r\n         handleError(data.Error);\r\n         return;\r\n      }\r\n\r\n      if (isError) setIsError(false);\r\n\r\n      setLoadedMoviesCount(resetLoaded ? data.Search.length : loadedMoviesCount + data.Search.length);\r\n      setTotalMoviesCount(+data.totalResults);\r\n      setLoadedPagesCount(nextPageNumber);\r\n      setLoadedMovies(resetLoaded ? [...data.Search] : [...loadedMovies, ...data.Search]);\r\n   }\r\n\r\n\r\n   function createURL(nextPageNumber: number): string {\r\n      const { API_KEY, title, type, year } = props.searchData;\r\n      const url: URL = new URL('https://www.omdbapi.com');\r\n\r\n      url.searchParams.set('apikey', API_KEY);\r\n      url.searchParams.set('s', title);\r\n      if (type) url.searchParams.set('type', type);\r\n      if (year) url.searchParams.set('y', year);\r\n      url.searchParams.set('page', nextPageNumber.toString());\r\n\r\n      return url.toString();\r\n   }\r\n\r\n\r\n   function handleError(status: string): void {\r\n      setIsError(true);\r\n      if (status === 'Movie not found!' || status === 'Check your connection') {\r\n         setErrorMessage(status)\r\n      } else if (status === 'Too many results.') {\r\n         setErrorMessage('Too many results, specify your request')\r\n      } else {\r\n         setErrorMessage('Something went wrong...');\r\n      }\r\n   }\r\n\r\n\r\n   function renderMoviesList(): JSX.Element[] {\r\n      return loadedMovies.map((movieData, index) => (\r\n         <Movie\r\n            data={{ ...movieData, plotLength: props.searchData.plotLength, API_KEY: props.searchData.API_KEY }}\r\n            key={index}\r\n         />\r\n      ))\r\n   }\r\n\r\n\r\n   // returns either 'Show more', or 'That's all', or Loading\r\n   function renderStatus(): JSX.Element {\r\n      if (totalMoviesCount === 0) {\r\n         return <div className=\"movies-list__loading\" >  <div></div><div></div><div></div><div></div>  </div>\r\n      }\r\n      if (totalMoviesCount === loadedMoviesCount) {\r\n         return <button className=\"movies-list__movies-end\">That's all</button>\r\n      }\r\n\r\n      return (\r\n         <button\r\n            className=\"movies-list__show-more-button\"\r\n            onClick={() => loadNextPage(false)}\r\n         >Show more</button>\r\n      )\r\n   }\r\n\r\n\r\n   return (\r\n      isError ?\r\n         <div className=\"error-message\">{errorMessage}</div>\r\n         :\r\n         <div className=\"movies-list\">\r\n            <div className=\"movies-list__movies-container\">\r\n               {renderMoviesList()}\r\n            </div>\r\n            {renderStatus()}\r\n         </div>\r\n   )\r\n}","import React from 'react';\r\n\r\nimport { ISearchData } from './interfaces';\r\n\r\nimport { SearchBar } from './components/searchbar/SearchBar';\r\nimport { ThemeToggler } from './components/ThemeToggler';\r\nimport { MoviesList } from './components/moviesList/MoviesList';\r\n\r\n\r\nimport 'normalize.css';\r\nimport './styles/style.scss';\r\n\r\n\r\ninterface IAppState {\r\n  shouldStartNewSearch: boolean,\r\n  searchData: ISearchData,\r\n  shouldRenderMoviesList: boolean,\r\n  theme: 'light' | 'dark'\r\n}\r\n\r\n\r\nexport class App extends React.Component<{}, IAppState> {\r\n  state: IAppState = {\r\n    shouldStartNewSearch: false,\r\n    searchData: {} as ISearchData,\r\n    shouldRenderMoviesList: false,\r\n    theme: 'light'\r\n  }\r\n\r\n\r\n  toggleTheme = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    const themeCheckbox = event.target as HTMLInputElement\r\n    const theme = themeCheckbox.checked ? 'light' : 'dark'\r\n    this.setState({ theme } as IAppState)\r\n  }\r\n\r\n\r\n  startSearching = (searchData: ISearchData): void => {\r\n    this.setState({\r\n      shouldRenderMoviesList: true,\r\n      shouldStartNewSearch: true,\r\n      searchData\r\n    });\r\n  }\r\n\r\n\r\n  resetStartNewSearch = (): void => {\r\n    this.setState({ shouldStartNewSearch: false })\r\n  }\r\n\r\n\r\n  render() {\r\n    const { shouldRenderMoviesList, searchData, shouldStartNewSearch } = this.state;\r\n\r\n    return (\r\n      <main id=\"app-root\" className={`theme-${this.state.theme}`} >\r\n        <ThemeToggler handleToggle={this.toggleTheme} />\r\n        <SearchBar handleSearch={this.startSearching} />\r\n\r\n        {shouldRenderMoviesList &&\r\n          <MoviesList\r\n            searchData={searchData}\r\n            shouldStartNewSearch={shouldStartNewSearch}\r\n            handleSearchStart={this.resetStartNewSearch}\r\n          />\r\n        }\r\n      </main>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}